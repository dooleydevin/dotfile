#+TITLE: Web Documentation
[[https://dotfilehub.com][Dotfilehub]] is a web front end for dotfile.
* View File
Any file is globally viewable at the path =/{username}/{alias}=. There are no private files.
If you want to use dotfilehub to manage secrets then you could self host it on a private network.

Files will only render in HTML if the client sends an accept header that contains =hmtl=. This allows
users to download files easily if they are in a environment without the Dotfile CLI.

For example:
#+BEGIN_SRC bash
curl https://dotfilehub.com/knoebber/bashrc > ~/.bashrc
#+END_SRC
* Create a new file
If you have the CLI installed use the =push= command to upload files.
** Alias
The alias must contain only letters, numbers, and underscores.
When alias is omitted it will be generated from the path.
** Path
The path is the location that =dotfile pull= will install the file to.
This must be either an absolute path or start with =~/=.
* Set your timezone
:PROPERTIES:
:custom_id: set-your-timezone
:END:
This will convert timestamps from the database to a timezone. The default is UTC.
The form expects a string like the /TZ database name/ column found here:
[[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]]

Depending on the server's host the available zones may be different.
Consult [[https://golang.org/pkg/time/#LoadLocation]] for more information.
* API
See https://github.com/knoebber/dotfile/tree/master/dotfileclient for an example of building
a client for the Dotfile API.
** List Files
#+BEGIN_SRC
GET /api/{username}
GET /api/{username}?path=true
#+END_SRC
Returns a list of aliases for username. Include paths with the =?path= parameter.
** Get File Data
   #+BEGIN_SRC bash
GET /api/{username}/{alias}
#+END_SRC
Returns a file's data in JSON format.
** Get Revision
   #+BEGIN_SRC bash
GET /api/{username}/{alias}/{hash}
#+END_SRC
Returns a files compressed revision at hash.
** Push File
   #+BEGIN_SRC bash
POST /api/{username}/{alias}
#+END_SRC
Post a file to the server. This can either be a new or existing file.
The request body is a multipart file upload.
The first part is a JSON encoding of the file data.
Every hash that is part of the file's data should have a corresponding file part in the request. 
The file parts are zlib compressed revisions that are named as its hash.

Request must have basic auth headers with the dotfilehub username and CLI token.
* Self host
:PROPERTIES:
:custom_id: self-host
:END:
Clone the repository and build the binary. The build step copies all
of the required assets into the =/bin= directory.
#+BEGIN_SRC bash
git clone https://github.com/knoebber/dotfile
cd dotfile
make dotfilehub
cd bin
./dotfilehub
#+END_SRC
The server is configured through the following optional flags:
** -addr
The address to listen on. Defaults to =localhost:3000=.
** -db
The location of the sqlite database. Creates a new database when it
does not yet exist.
Defaults to =~/.dotfilehub.db=.
** -host
The name of the host. Used for displaying the host name in
the CLI setup page and the password reset email.
If this is not set the server will use the host header which is often
incorrect. This shouldn't contain =http://= or =https://=.
** -secure
Boolean flag, defaults false.
Set this to true when the host is using HTTPS.
** -proxyheaders
Boolean flag, defaults false.
When true, the server will log request IPs by inspecting reverse proxy headers.
** -smtp-config-path
Sets up a SMTP client for account recovery. The value should be a
path to a JSON file. The file must contain the following keys:
#+BEGIN_SRC javascript
{
    "host": "",
    "port": 0,
    "username": "",
    "password": "",
    "sender": ""
}
#+END_SRC
The client will use PLAIN authentication.
